{"version":3,"sources":["main.js"],"names":["_stockHandlerDist","require","_stockMarketDist","_defaultStocksDist","gbce","_stockMarketDist2","default","stockHandler","_stockHandlerDist2","stockMarket","console","log","getDividendYield","stocks","getPeRatio","recordTrade","trades","length","stock1","defaultStocks","getVolumeWeightedStockPriceFor","stock2","stock3","stock4","stock5","getAllShareIndex"],"mappings":"qFAAA,IAAAA,kBAAAC,QAAA,yFACAC,iBAAAD,QAAA,uFACAE,mBAAAF,QAAA,6BAEMG,KAAO,IAAAC,kBAAbC,QACMC,aAAe,IAAAC,mBAAAF,SAAmBG,YAAxCL,OAGAM,QAAAC,IAAA,oCACAD,QAAAC,IAAYJ,aAAAK,iBAA8BR,KAAAS,OAA9B,GAAZ,MAEAH,QAAAC,IAAA,oCACAD,QAAAC,IAAYJ,aAAAK,iBAA8BR,KAAAS,OAA9B,GAAZ,MAEAH,QAAAC,IAAA,oCACAD,QAAAC,IAAYJ,aAAAK,iBAA8BR,KAAAS,OAA9B,GAAZ,MAEAH,QAAAC,IAAA,oCACAD,QAAAC,IAAYJ,aAAAK,iBAA8BR,KAAAS,OAA9B,GAAZ,MAEAH,QAAAC,IAAA,oCACAD,QAAAC,IAAYJ,aAAAK,iBAA8BR,KAAAS,OAA9B,GAAZ,MAIAH,QAAAC,IAAA,+BACAD,QAAAC,IAAYJ,aAAAO,WAAwBV,KAAAS,OAAxB,GAAZ,MAEAH,QAAAC,IAAA,+BACAD,QAAAC,IAAYJ,aAAAO,WAAwBV,KAAAS,OAAxB,GAAZ,MAEAH,QAAAC,IAAA,+BACAD,QAAAC,IAAYJ,aAAAO,WAAwBV,KAAAS,OAAxB,GAAZ,MAEAH,QAAAC,IAAA,+BACAD,QAAAC,IAAYJ,aAAAO,WAAwBV,KAAAS,OAAxB,GAAZ,MAEAH,QAAAC,IAAA,+BACAD,QAAAC,IAAYJ,aAAAO,WAAwBV,KAAAS,OAAxB,GAAZ,MAIAH,QAAAC,IAAA,mCACAJ,aAAAQ,mBACWX,KAAAS,OADc,OAAA,kBAAA,YAAzB,MAMAH,QAAAC,IAAYJ,aAAAE,YAAAO,OAAZ,IAEAN,QAAAC,IAAA,mCACAJ,aAAAQ,mBACWX,KAAAS,OADc,OAAA,kBAAA,aAAzB,MAMAH,QAAAC,IAAYJ,aAAAE,YAAAO,OAAZ,IAEAN,QAAAC,IAAA,kCACAJ,aAAAQ,mBACWX,KAAAS,OADc,OAAA,kBAAA,YAAzB,KAMAH,QAAAC,IAAYJ,aAAAE,YAAAO,OAAZ,IAEAN,QAAAC,IAAA,mCACAJ,aAAAQ,mBACWX,KAAAS,OADc,OAAA,kBAAA,YAAzB,MAMAH,QAAAC,IAAYJ,aAAAE,YAAAO,OAAZ,IAEAN,QAAAC,IAAA,mCACAJ,aAAAQ,mBACWX,KAAAS,OADc,OAAA,kBAAA,aAAzB,MAMAH,QAAAC,IAAYJ,aAAAE,YAAAO,OAAZ,IAIAN,QAAAC,IAAA,+BACAD,QAAAC,IAAA,iBAA6BJ,aAAAE,YAAAO,OAA7BC,QAEA,IAAIC,QAAS,EAAAf,mBAAAgB,iBAAb,GACAT,QAAAC,IAAA,wCAAoDJ,aAAAa,+BAApDF,SACA,IAAIG,QAAS,EAAAlB,mBAAAgB,iBAAb,GACAT,QAAAC,IAAA,wCAAoDJ,aAAAa,+BAApDC,SACA,IAAIC,QAAS,EAAAnB,mBAAAgB,iBAAb,GACAT,QAAAC,IAAA,wCAAoDJ,aAAAa,+BAApDE,SACA,IAAIC,QAAS,EAAApB,mBAAAgB,iBAAb,GACAT,QAAAC,IAAA,wCAAoDJ,aAAAa,+BAApDG,SACA,IAAIC,QAAS,EAAArB,mBAAAgB,iBAAb,GACAT,QAAAC,IAAA,wCAAoDJ,aAAAa,+BAApDI,SAGAd,QAAAC,IAAA,kBACAD,QAAAC,IAAA,4BAAwCJ,aAAxCkB","sourcesContent":["import StockHandler from './dist/stockHandler-dist';\nimport StockMarket from './dist/stock-market-dist';\nimport { defaultStocks } from './dist/defaultStocks-dist';\n\nconst gbce = new StockMarket();\nconst stockHandler = new StockHandler({ stockMarket: gbce });\n\n//Dividend Yield\nconsole.log(\"Dividend Yield For TEA price 100\");\nconsole.log(stockHandler.getDividendYield(gbce.stocks[0], 100));\n\nconsole.log(\"Dividend Yield For POP price 100\");\nconsole.log(stockHandler.getDividendYield(gbce.stocks[1], 100));\n\nconsole.log(\"Dividend Yield For ALE price 100\");\nconsole.log(stockHandler.getDividendYield(gbce.stocks[2], 100));\n\nconsole.log(\"Dividend Yield For GIN price 100\");\nconsole.log(stockHandler.getDividendYield(gbce.stocks[3], 100));\n\nconsole.log(\"Dividend Yield For JOE price 100\");\nconsole.log(stockHandler.getDividendYield(gbce.stocks[4], 100));\n\n//P/E Ratio\n\nconsole.log(\"P/E Ratio For TEA price 100\");\nconsole.log(stockHandler.getPeRatio(gbce.stocks[0], 100));\n\nconsole.log(\"P/E Ratio For POP price 100\");\nconsole.log(stockHandler.getPeRatio(gbce.stocks[1], 100));\n\nconsole.log(\"P/E Ratio For ALE price 100\");\nconsole.log(stockHandler.getPeRatio(gbce.stocks[2], 100));\n\nconsole.log(\"P/E Ratio For GIN price 100\");\nconsole.log(stockHandler.getPeRatio(gbce.stocks[3], 100));\n\nconsole.log(\"P/E Ratio For JOE price 100\");\nconsole.log(stockHandler.getPeRatio(gbce.stocks[4], 100));\n\n//Trades\n\nconsole.log(\"Trade of TEA price 100, 5 units\");\nstockHandler.recordTrade({\n    stock: gbce.stocks[0],\n    qty: 5, \n    transactionType: 'buy', \n    price: 100\n});\nconsole.log(stockHandler.stockMarket.trades[0]);\n\nconsole.log(\"Trade of POP price 100, 5 units\");\nstockHandler.recordTrade({\n    stock: gbce.stocks[1],\n    qty: 5,\n    transactionType: 'sell',\n    price: 100\n});\nconsole.log(stockHandler.stockMarket.trades[1]);\n\nconsole.log(\"Trade of ALE price 50, 5 units\");\nstockHandler.recordTrade({\n    stock: gbce.stocks[2],\n    qty: 5,\n    transactionType: 'buy',\n    price: 50\n});\nconsole.log(stockHandler.stockMarket.trades[2]);\n\nconsole.log(\"Trade of GIN price 100, 5 units\");\nstockHandler.recordTrade({\n    stock: gbce.stocks[3],\n    qty: 5,\n    transactionType: 'buy',\n    price: 100\n});\nconsole.log(stockHandler.stockMarket.trades[3]);\n\nconsole.log(\"Trade of JOE price 200, 5 units\");\nstockHandler.recordTrade({\n    stock: gbce.stocks[4],\n    qty: 5,\n    transactionType: 'sell',\n    price: 200\n});\nconsole.log(stockHandler.stockMarket.trades[4]);\n\n//Volume Weighted Stock Price\n\nconsole.log(\"Volume Weighted Stock Price\");\nconsole.log(`Total trades: ${stockHandler.stockMarket.trades.length}`);\n// stockHandler.stockMarket.trades[4].timestamp = new Date((new Date()) - 6 * 60000); //more than 5 minutes\nlet stock1 = defaultStocks()[4];\nconsole.log(`Volume Weighted Stock Price for JOE: ${stockHandler.getVolumeWeightedStockPriceFor(stock1)}`);\nlet stock2 = defaultStocks()[0];\nconsole.log(`Volume Weighted Stock Price for TEA: ${stockHandler.getVolumeWeightedStockPriceFor(stock2)}`);\nlet stock3 = defaultStocks()[1];\nconsole.log(`Volume Weighted Stock Price for POP: ${stockHandler.getVolumeWeightedStockPriceFor(stock3)}`);\nlet stock4 = defaultStocks()[2];\nconsole.log(`Volume Weighted Stock Price for ALE: ${stockHandler.getVolumeWeightedStockPriceFor(stock4)}`);\nlet stock5 = defaultStocks()[3];\nconsole.log(`Volume Weighted Stock Price for GIN: ${stockHandler.getVolumeWeightedStockPriceFor(stock5)}`);\n\n//Geometric Mean\nconsole.log(\"Geometric Mean\");\nconsole.log(`Geometric Mean for GBCE: ${stockHandler.getAllShareIndex()}`);"]}